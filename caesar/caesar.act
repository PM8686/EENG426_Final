import globals;
import std::channel;

// In general, channel letters have the following meaning:
// - A: ascii value - 8b
// - P: character index - 8b - [0,26)
// - K: shift amount - 8b - [0,26)
// - C: character index - 8b - [0,26)
// - CAPITAL: 1b - true if capital letter
// - LOWER: 1b - true if lowercase letter


import "capital_check.act";
// // If 65 <= A < 91, output 1, otherwise output 0
// defproc capital_check(std::channel::bd?<8> A, std::channel::bd?<8> CAPITAL) {
//   std::channel::bd<8> n65,
//                       n91,
//                       A_to_compare_65,
//                       A_to_compare_91;
//   std::channel::bd<1> lt_65,
//                       ge_65,
//                       lt_91;

//   SOURCE_NEG_65 source_n65(n65);
//   SOURCE_NEG_91 source_n91(n91);

//   COPY copy_A(A, A_to_compare_65, A_to_compare_91);

//   // Check A < 65 and then invert the result to get A >= 65
//   COMPARE compare_65(A_to_compare_65, n65, lt_65);
//   BD_INV inv_compare_65(lt_65, ge_65);

//   // Check A < 91
//   COMPARE compare_91(A_to_compare_91, n65_to_lt_91, lt_91);

//   // A >= 65 and A < 91
//   BD_AND and(ge_65, lt_91, CAPITAL);
// }


import "lower_check.act";  // function name is lower_check ***
// // If 97 <= A < 123, output 1, otherwise output 0
// defproc lower_check(std::channel::bd?<8> A, std::channel::bd?<8> LOWER) {
//   std::channel::bd<8> n97,
//                       n123,
//                       A_to_compare_97,
//                       A_to_compare_123;
//   std::channel::bd<1> lt_97,
//                       ge_97,
//                       lt_123;

//   SOURCE_NEG_97 source_n97(n97);
//   SOURCE_NEG_123 source_n123(n123);

//   COPY copy_A(A, A_to_compare_97, A_to_compare_123);

//   // Check A < 97 and then invert the result to get A >= 97
//   COMPARE compare_97(A_to_compare_97, n97, lt_97);
//   BD_INV inv_compare_97(lt_97, ge_97);

//   // Check A < 123
//   COMPARE compare_123(A_to_compare_123, n97_to_lt_123, lt_123);

//   // A >= 97 and A < 123
//   BD_AND and(ge_97, lt_123, LOWER);
// }


import "preshift.act"; // function name is preshift ***
// // If LOWER = 0, output A - 65, otherwise output A - 97
// defproc preshift (std::channel::bd?<8> A; std::channel::bd?<1> LOWER; std::channel::bd!<8> P) {
//   std::channel::bd<8> split_to_subtract_65,
//                       split_to_subtract_97,
//                       n65_to_subtract_65,
//                       n97_to_subtract_97,
//                       subtract_65_to_merge,
//                       subtract_97_to_merge;
//   std::channel::bd<1> control_to_split,
//                       control_to_merge,

//   SOURCE_NEG_65 n65(n65_to_subtract_65);
//   SOURCE_NEG_97 n97(n97_to_subtract_97);

//   COPY1 case_copy(LOWER, control_to_split, control_to_merge);
//   SPLIT choose_case(A, control_to_split, split_to_subtract_65, split_to_subtract_97);
//   MERGE merge_case(subtract_65_to_merge, subtract_97_to_merge, control_to_merge, P);

//   // Calculate A - 65 if LOWER = 0 (meaning capital letter)
//   ADD subtract_65(split_to_subtract_65, n65_to_subtract_65, subtract_65_to_merge);

//   // Calculate A - 97 if LOWER = 1 (meaning lowercase letter)
//   ADD subtract_97(split_to_subtract_97, n97_to_subtract_97, subtract_97_to_merge);
// }


import "postshift.act"; // function name is postshift
// // If LOWER = 0, output P + 65, otherwise output P + 97
// defproc postshift (std::channel::bd?<8> P; std::channel::bd?<1> LOWER; std::channel::bd!<8> A) {
//   std::channel::bd<8> split_to_add_65,
//                       split_to_add_97,
//                       p65_to_add_65,
//                       p97_to_add_97,
//                       add_65_to_merge,
//                       add_97_to_merge;
//   std::channel::bd<1> control_to_split,
//                       control_to_merge,

//   SOURCE_65 p65(p65_to_add_65);
//   SOURCE_97 p97(p97_to_add_97);

//   COPY1 case_copy(LOWER, control_to_split, control_to_merge);
//   SPLIT choose_case(A, control_to_split, split_to_add_65, split_to_add_97);
//   MERGE merge_case(add_65_to_merge, add_97_to_merge, control_to_merge, P);

//   // Calculate P + 65 if LOWER = 0 (meaning capital letter)
//   ADD add_65(split_to_add_65, p65_to_add_65, add_65_to_merge);

//   // Calculate P + 97 if LOWER = 1 (meaning lowercase letter)
//   ADD add_97(split_to_add_97, p97_to_add_97, add_97_to_merge);
// }


import "shift.act";
// Output (P + K) % 26
// defproc shift (std::channel::bd?<8> P; std::channel::bd?<8> K; std::channel::bd?<8> C) {
//   std::channel::bd<8> add_out,
//                       add_to_compare,
//                       add_to_split,
//                       m26_to_compare,
//                       split_to_merge,
//                       split_to_subtract,
//                       m26_to_subtract,
//                       subtract_to_merge;
//   std::channel::bd<1> compare_out,
//                       compare_to_split,
//                       compare_to_merge,

//   SOURCE_NEG_26 m26_for_compare(m26_to_compare);
//   SOURCE_NEG_26 m26_for_subtract(m26_to_subtract);

//   // Calculate P+K
//   ADD add_k(P, K, add_out);
//   COPY copy_add_result(add_out, add_to_compare, add_to_split);

//   // Check whether P+K < 26
//   COMPARE less_than_26(add_to_compare, m26_to_compare, compare_out);
//   COPY1 compare_result_copy(compare_out, compare_to_split, compare_to_merge);

//   // Split P+K based based on whether P+K < 26
//   SPLIT split_add(add_to_split, compare_to_split, split_to_merge, split_to_subtract);

//   // Calculate P+K-26 if P+K >= 26
//   ADD subtract_26(split_to_subtract, m26_6o_subtract, subtract_to_merge);

//   // Choose either P+K or P+K-26 depending on whether P+K < 26
//   MERGE merge_add_and_subtract(split_to_merge, subtract_to_merge, compare_to_merge, C);
// }

import "bd_ops.act";
import "sink_1bit.act";
import "split_1bit.act";
import "copy_1bit.act";
defproc caesar (std::channel::bd?<8> P; std::channel::bd?<8> K; std::channel::bd!<8> C) {
  std::channel::bd<8> P_to_comparisons,
                      P_to_split,
                      P_to_check_caps,
                      P_to_check_lower,
                      shift_split_to_merge,
                      shift_split_to_preshift,
                      preshift_to_shift,
                      shift_to_postshift,
                      postshift_to_merge;
  std::channel::bd<1> ctrl_capital,
                      ctrl_lower,
                      ctrl_lower_to_or,
                      ctrl_lower_to_case_split,
                      ctrl_shift,
                      ctrl_shift_to_splits,
                      ctrl_shift_to_merge,
                      ctrl_shift_to_shift_split,
                      ctrl_shift_to_case_split,
                      ctrl_lower_to_sink,
                      ctrl_lower_to_shifts,
                      ctrl_lower_to_preshift,
                      ctrl_lower_to_postshift;

  copy2 copy_P(P, P_to_comparisons, P_to_split);
  copy2 copy_P_comparisons(P_to_comparisons, P_to_check_caps, P_to_check_lower);

  // Check whether the input is a letter or not
  // - ctrl_capital: true if the input is a capital letter
  // - ctrl_lower: true if the input is a lowercase letter
  // - ctrl_shift: true if the input should be shifted (i.e. is a capital or lowercase letter)
  capital_check check_caps(P_to_check_caps, ctrl_capital);
  lower_check check_lower(P_to_check_lower, ctrl_lower);
  copy_1bit ctrl_lower_copy(ctrl_lower, ctrl_lower_to_or, ctrl_lower_to_case_split);
  bd_or or(ctrl_capital, ctrl_lower_to_or, ctrl_shift);
  copy_1bit copy_ctrl_shift(ctrl_shift, ctrl_shift_to_splits, ctrl_shift_to_merge);
  copy_1bit copy_ctrl_shift_splits(ctrl_shift_to_splits, ctrl_shift_to_shift_split, ctrl_shift_to_case_split);

  // Split between passing the value right through, and shifting
  split2 shift_split(P_to_split, ctrl_shift_to_shift_split, shift_split_to_merge, shift_split_to_preshift);

  // Split between ignoring the case value, and sending it to the shift logic
  split_1bit case_split(ctrl_lower_to_case_split, ctrl_shift_to_case_split, ctrl_lower_to_sink, ctrl_lower_to_shifts);
  sink_1bit sink_ctrl_lower(ctrl_lower_to_sink);
  copy_1bit cp1(ctrl_lower_to_shifts, ctrl_lower_to_preshift, ctrl_lower_to_postshift);

  // Shift the value if needed
  preshift pre(shift_split_to_preshift, ctrl_lower_to_preshift, preshift_to_shift);
  shift shft(preshift_to_shift, K, shift_to_postshift);
  postshift post(shift_to_postshift, ctrl_lower_to_postshift, postshift_to_merge);

  // Merge the unshifted and regular value
  merge2 merge(shift_split_to_merge, postshift_to_merge, ctrl_shift_to_merge, C);
}
