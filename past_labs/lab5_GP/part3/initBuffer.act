import globals;
import std::cells;
import std::channel;
import std::gates;
import "pulse.act";


open std::cells;
open std::channel;
open std::gates;
// namespace globals { }

// m1 is the left channel, p1 is the right channel. You can insert the pulse generator + delay line at the appropriate place.
defproc elem_c_itb (bd<8> m1; bd<8> p1)
{
    bool tmp_p1r;
    prs {
        ~Reset & (~m1.r & ~p1.a) -> tmp_p1r+// diff var here then delay to R
         Reset | ( m1.r &  p1.a) -> tmp_p1r-
    }

    std::cells::INVX1 m1_inv(p1.r,m1.a);
    // write to right request using delay
    // on reset R.r is 1 after a delay
    CLKBUF3 delay(tmp_p1r, p1.r);
}

defproc initBuffer (bd?<8> L; bd!<8> R)
{
  // Internal signals
  // bool control[2];
  // bool tmp;

  // // also add reset using nor gate 
  // NOR2X1 nor(Reset, R.a, tmp);

  // // invert control (would be R.a without the reset)
  // INVX1 inv_1(tmp, control[0]);

  // // OR L.r to ensure that on reset the input to Celem from L.r is 1 so that Celem output is 0
  // bool tmp2;
  // INVX1 inv_l(L.r, tmp2);
  // OR2X1 or_l(Reset, tmp2, control[1]);

  // // C-element control logic: synchronize between request from L and ack from R
  // ctree<2, true> celem(control, L.a); //invert
  // m1 is the left channel, p1 is the right channel. You can insert the pulse generator + delay line at the appropriate place.
  elem_c_itb c_elem_better(L, R);


  // add pulse generator based on control (L.a)
  bool pulse; 
  pulseGen pulseG(L.a, pulse);

  // Latch the data from the L channel using the control signal
  // use an array of latches since each latch only takes one bit at a time (these are done in parallel)
  LATCH l[8]; //array of latches, one for each of the 8 bits
  bool tmp_arr[8]; // store initial results to then be NOR with Reset so that initialized to 0
  l[0](pulse, L.d[0], tmp_arr[0]);
  l[1](pulse, L.d[1], tmp_arr[1]);
  l[2](pulse, L.d[2], tmp_arr[2]);
  l[3](pulse, L.d[3], tmp_arr[3]);
  l[4](pulse, L.d[4], tmp_arr[4]);
  l[5](pulse, L.d[5], tmp_arr[5]);
  l[6](pulse, L.d[6], tmp_arr[6]);
  l[7](pulse, L.d[7], tmp_arr[7]);

  // inver tmp_arr so nor will output the right thing
  bool tmp2_arr[8];
  INVX1 inv1(tmp_arr[0], tmp2_arr[0]);
  INVX1 inv2(tmp_arr[1], tmp2_arr[1]);
  INVX1 inv3(tmp_arr[2], tmp2_arr[2]);
  INVX1 inv4(tmp_arr[3], tmp2_arr[3]);
  INVX1 inv5(tmp_arr[4], tmp2_arr[4]);
  INVX1 inv6(tmp_arr[5], tmp2_arr[5]);
  INVX1 inv7(tmp_arr[6], tmp2_arr[6]);
  INVX1 inv8(tmp_arr[7], tmp2_arr[7]);


  // NOR with Reset so that R.d initialized to 0 on reset
  NOR2X1 nor1(Reset, tmp2_arr[0], R.d[0]);
  NOR2X1 nor2(Reset, tmp2_arr[1], R.d[1]);
  NOR2X1 nor3(Reset, tmp2_arr[2], R.d[2]);
  NOR2X1 nor4(Reset, tmp2_arr[3], R.d[3]);
  NOR2X1 nor5(Reset, tmp2_arr[4], R.d[4]);
  NOR2X1 nor6(Reset, tmp2_arr[5], R.d[5]);
  NOR2X1 nor7(Reset, tmp2_arr[6], R.d[6]);
  NOR2X1 nor8(Reset, tmp2_arr[7], R.d[7]);

  // write to right request using delay
  // on reset R.r is 1 after a delay
  // bool tmp_Rr;
  // CLKBUF3 delay(L.a, tmp_Rr);
  // OR2X1 or(Reset, tmp_Rr, R.r);
}

// 1 - need to have R.r at 1 after reset
// 2 - above won't work because we need to generate a pulse to insert from latch into R
//     which means L.a would have to start at 0, then jump to 1 the back to 0 on reset
//     since L.a can't always be 1 and if immediately 1 on reset then there is no pulse, it is just high
// 3 - we accidentally implemented a version of this with out regular buffer, so
//     the only thing to add is make R.r 1 after reset (but not L.a so that next pulse can occur)

  // // Latch the data from the L channel using the control signal
  // // use an array of latches since each latch only takes one bit at a time (these are done in parallel)
  // LATCH l[8]; //array of latches, one for each of the 8 bits
  // // use nor gate to nor reset with L.d values to reinitialize R.d as needed
  // bool buff[8]; //holds nor output 
  // NOR2X1 nor1(Reset, L.d[0], buff[0]); // if reset is 1, nor will return 0
  // NOR2X1 nor2(Reset, L.d[1], buff[1]);
  // NOR2X1 nor3(Reset, L.d[2], buff[2]);
  // NOR2X1 nor4(Reset, L.d[3], buff[3]);
  // NOR2X1 nor5(Reset, L.d[4], buff[4]);
  // NOR2X1 nor6(Reset, L.d[5], buff[5]);
  // NOR2X1 nor7(Reset, L.d[6], buff[6]);
  // NOR2X1 nor8(Reset, L.d[7], buff[7]);

  //  // put buffer value into R.d when pulse
  // l[0](pulse, buff[0], R.d[0]);
  // l[1](pulse, buff[1], R.d[1]);
  // l[2](pulse, buff[2], R.d[2]);
  // l[3](pulse, buff[3], R.d[3]);
  // l[4](pulse, buff[4], R.d[4]); 
  // l[5](pulse, buff[5], R.d[5]);
  // l[6](pulse, buff[6], R.d[6]);
  // l[7](pulse, buff[7], R.d[7]);