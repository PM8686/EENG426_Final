define procname "test4"
define lefout "output4.lef"
define guideout "output4.guide"
define defout "output4.def"
define outfilenoext "output4"

# set output directories
conf:set_string "lefdef.rect_outinitdir" "../../init_rect"
conf:set_string "lefdef.rect_inpath" "../../mag"
conf:set_string "lefdef.rect_outdir" "../../final_rect"

# -- Input files
  # read in the test act file
act:read "test.act"
  # add the cells file to the design
act:merge "../../cells.act"

  # expand the design, substituting all parameters
act:expand
  # set the top-level process to the test
act:top procname

# -- Circuit generation
  # map all the production rules to the cells
ckt:cell-map
  # generate the transistor-level circuit
ckt:map

# -- Placement flow

  # load layout generation modules
load-scm "phydb.scm"

  # set the layout density, and calculate the area multiplier
define density 0.5
define area (* 1.05 (/ 1 density))

  # create the layout problem with aspect ratio 1.0
phydb:create area 1.0 lefout

  # emit .rect files for all the cells needed
act:layout:rect

  # initialize Dali, the cell placer
dali:init 3
  # place the design with the specified density
dali:place-design density
  # place I/Os on metal1
dali:place-io "met1"
  # export placement information to the layout db
dali:export-phydb
  # end placer
dali:close

# initialize power detailed router
pwroute:init 0
# disable reinforcement
pwroute:set_reinforcement 0
# wire up power and ground
pwroute:run
# save to db
pwroute:export-phydb
# end power routing
pwroute:close

# initialize global router
sproute:init 0
# compute global routes
sproute:run
# end global routing phase
sproute:close

# save guide file summarizing global routes
phydb:write-guide guideout

# -- Write outputs
phydb:write-def defout
phydb:write-aux-rect outfilenoext
phydb:update-lef outfilenoext
