import globals;
import std::cells;
import std::channel;
import std::gates;
import "pulse.act";


open std::cells;
open std::channel;
open std::gates;
namespace globals { }

//2 way copy
defproc copy_1bit(bd?<1> L; bd!<1> R1; bd!<1> R2)
{
  // Internal signals
  bool control[3];

  // also add reset using nor gate 
  bool tmp[3];
  NOR2X1 nor_2(Reset, R1.a, tmp[1]); //need to reset both R channels
  NOR2X1 nor_3(Reset, R2.a, tmp[2]); 
  INVX1 inv_1(tmp[1], control[1]);
  INVX1 inv_2(tmp[2], control[2]);

  INVX1 inv_3(L.r, tmp[0]);
  OR2X1 or_1(Reset, tmp[0], control[0]); //redundancy

  // C-element control logic: synchronize between request from L and ack from R
  ctree<3, true> celem(control, L.a);

  // add pulse generator based on control (L.a)
  bool pulse; 
  pulseGen pulseG(L.a, pulse);

  // Latch the data from the L channel using the control signal
  // use an array of latches since each latch only takes one bit at a time (these are done in parallel)
  LATCH l[1]; //array of latches, one for each of the 8 bits
  l[0](pulse, L.d[0], R1.d[0]);

  // wire together R1 and R2 data
  R2.d[0] = R1.d[0];

  // write to right request using delay
  CLKBUF3 delay1(L.a, R1.r);
  R2.r = R1.r;
}
