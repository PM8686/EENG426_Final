import std::channel;
open std::channel;

import "comp2.act";
import "adder2.act";
import "merge2.act";
import "copy2.act";
import "copy_1bit.act";
import "src_26.act";
import "split2.act";

defproc shift (bd?<8> L1; bd?<8> L2; bd!<8> R)
{
    // bd<8> Src_Z, Sum, Mrg, Y, B_out;
    bd<8> Sum, compSum, splitIn, subIn, toMux, subOut, negSrc1, negSrc2;
    bd<1> compOut, comp1, comp2;

    adder2 add_key(L1, L2, Sum);
    copy2 sums(Sum, compSum, splitIn); 
    source_26 src1(negSrc1);
    source_26 src2(negSrc2);
    comp2 comp(compSum, negSrc1, compOut); // if L1 >= |L2| --> R.d[0] = 0, if L1 < |L2| --> R.d[0] = 1
    copy_1bit comps(compOut, comp1, comp2);
    split2 split(splitIn, comp1, toMux, subIn); //note: Cd=1 chooses R1 and Cd=0 chooses R2
    adder2 sub(subIn, negSrc2, subOut);
    merge2 merge(toMux, subOut, comp2, R); //note: C.d=1 chooses L1 and C.d=0 chooses L2
}

// starting from the copy step it doesn't work
// the issue is, with our design, the output of merge is copied into R and Y, R is sent out while Y is used as an input into ibuff.
// while everything is initialized to 0 on reset, once reset is off, then cycling causes X to appear in the data channels, but the handshake channels work properly
// when removing the looping of Y, the output occurs as expected.

// TL;DR data channels within loop are X-ed b/c the loop

// Attempted Solutions:
// - adding delays to all data flow components
// - adding a buffer between copy and the ibuff
// - adding a init buffer between copy and the ibuff

// if ibuff input channel is not initialized, ibuff becomes X, and subsequently add becomes X and so on
// can't have source go to two diff places or loops forever


// Manohar 10/10:
/*
- all warnings are okay if reseting/setting up vars for testing, otherwise they are bad (use the mode reset and mode run thing from Rylan)
- initBuffer should have R.r be 0 while in Reset (that is while Reset is 1), then the momment that Reset is 0, then can flip R.r to 1
    - otherwise the R.r would be propagated through the loop and cause the L.a acknoledge bit not to match, thus deadlock
- Testing:
    - use watch ____ to see if we are cycling vs. Deadlock
    - if deadlock, nothing will happen so simulation will just exit out

- Part II: 
    - just go through the script he laid out, nothing else should happen besides files being made

- Part III:
    - use the mag.pl executable to create the .tcl scripts, from there magic should be able to open .tcl scripts
    - the only thing we need to do is the wiring, nothing else
    - "this should be a relatiely quick lab"
*/