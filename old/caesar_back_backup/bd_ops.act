import globals;
import std::cells;
import std::channel;
import "pulse.act";

open std::cells;
open std::channel;

defcell elem_c_1x1 (bd?<1> L; bd!<1> R)
{
  bool c_out;

  prs {
    ~Reset & (L.r & ~R.a) -> c_out+
    Reset | (~L.r & R.a) -> c_out-
  }

  CLKBUF3 delay(c_out, R.r);
  L.a = c_out;
}

defcell elem_c_2x1 (bd?<1> L1; bd?<1> L2; bd!<1> R)
{
  bool c_out;

  prs {
    ~Reset & (L1.r & L2.r & ~R.a) -> c_out+
    Reset | (~L1.r & ~L2.r & R.a) -> c_out-
  }

  CLKBUF3 delay(c_out, R.r);
  L1.a = c_out;
  L2.a = c_out;
}

// Bundled-data channel INV
defproc bd_inv(bd?<1> L; bd!<1> R)
{
  bool pulse, Rd;

  prs {
    L.d[0] => Rd-
  }

  elem_c_1x1 elem_c(L, R);
  pulseGen pulseG(L.a, pulse);
  LATCH latch(pulse, Rd, R.d[0]);
}

// Bundled-data channel AND
defproc bd_and(bd?<1> L1; bd?<1> L2; bd!<1> R)
{
  bool pulse, Rd;

  prs {
    L1.d[0] & L2.d[0] => Rd+
  }

  elem_c_2x1 elem_c(L1, L2, R);
  pulseGen pulseG(L1.a, pulse);
  LATCH latch(pulse, Rd, R.d[0]);
}

// Bundled-data channel OR
defproc bd_or(bd?<1> L1; bd?<1> L2; bd!<1> R)
{
  bool pulse, Rd;

  prs {
    L1.d[0] | L2.d[0] => Rd+
    ~L1.d[0] & ~L2.d[0] => Rd-
  }

  elem_c_2x1 elem_c(L1, L2, R);
  pulseGen pulseG(L1.a, pulse);
  LATCH latch(pulse, Rd, R.d[0]);
}
